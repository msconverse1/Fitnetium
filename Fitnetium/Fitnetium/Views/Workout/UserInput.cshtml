@model List<Fitnetium.Models.Monday>

@{
    ViewBag.Title = "UserInput";
}

<h2>UserInput</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Monday</h4>

    @for (int i = 0; i < Model.Count; i++)
    {
        @Html.HiddenFor(model => model[i].WorkoutID)
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model[i].Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-6">
                @Html.DisplayFor(model => model[i].Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model[i].Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model[i].Sets, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-6">
                @Html.DisplayFor(model => model[i].Sets, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model[i].Sets, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model[i].Reps, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-6">
                @Html.DisplayFor(model => model[i].Reps, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model[i].Reps, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model[i].Time, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-6">
                @Html.DisplayFor(model => model[i].Time, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model[i].Time, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model[i].SetsCompleted, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-6">
                @Html.EditorFor(model => model[i].SetsCompleted, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model[i].SetsCompleted, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model[i].RepsCompleted, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-6">
                @Html.EditorFor(model => model[i].RepsCompleted, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model[i].RepsCompleted, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model[i].TimeCompleted, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-6">
                @Html.EditorFor(model => model[i].TimeCompleted, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model[i].TimeCompleted, "", new { @class = "text-danger" })
            </div>
        </div>
    }
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Submit" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
